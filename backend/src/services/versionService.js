const axios = require('axios');
const fs = require('fs').promises;
const path = require('path');
const { exec } = require('child_process');
const util = require('util');
const execPromise = util.promisify(exec);

// Cache the versions to prevent frequent API calls
let cachedVersions = null;
let lastFetched = null;
const CACHE_TTL = 3600000; // 1 hour in milliseconds

/**
 * Fetch all available Minecraft versions
 */
async function getAvailableVersions() {
  // Check if we have a valid cached result
  const now = Date.now();
  if (cachedVersions && lastFetched && (now - lastFetched < CACHE_TTL)) {
    return cachedVersions;
  }
  
  try {
    // Fetch latest version manifest from Mojang API
    const response = await axios.get('https://launchermeta.mojang.com/mc/game/version_manifest.json');
    const data = response.data;
    
    // Process version data
    const versions = data.versions.map(version => ({
      id: version.id,
      type: version.type,
      url: version.url,
      time: version.time,
      releaseTime: version.releaseTime,
      latest: version.id === data.latest.release || version.id === data.latest.snapshot
    }));
    
    // Update cache
    cachedVersions = {
      latest: {
        release: data.latest.release,
        snapshot: data.latest.snapshot
      },
      versions: versions
    };
    
    lastFetched = now;
    return cachedVersions;
  } catch (error) {
    console.error('Failed to fetch Minecraft versions:', error);
    
    // Return cached versions if available, otherwise throw error
    if (cachedVersions) {
      return cachedVersions;
    }
    throw new Error('Failed to fetch Minecraft versions');
  }
}

/**
 * Download a specific Minecraft server version
 */
async function downloadServerJar(version, serverDir) {
  try {
    // Get version manifest
    const versions = await getAvailableVersions();
    const versionInfo = versions.versions.find(v => v.id === version);
    
    if (!versionInfo) {
      throw new Error(`Version ${version} not found`);
    }
    
    // Get version details
    const versionResponse = await axios.get(versionInfo.url);
    const versionData = versionResponse.data;
    
    if (!versionData.downloads || !versionData.downloads.server) {
      throw new Error(`No server download available for version ${version}`);
    }
    
    const serverUrl = versionData.downloads.server.url;
    const serverJarPath = path.join(serverDir, 'server.jar');
    
    // Download the server jar using curl for better download performance
    await execPromise(`curl -L -o ${serverJarPath} ${serverUrl}`);
    
    // Create eula.txt file
    await fs.writeFile(
      path.join(serverDir, 'eula.txt'),
      'eula=true\n# Generated by Minecraft Panel\n# Made with ❤️ by Pauli\n'
    );
    
    return {
      success: true,
      jarPath: serverJarPath,
      version
    };
  } catch (error) {
    console.error(`Failed to download server jar for version ${version}:`, error);
    throw new Error(`Failed to download server jar: ${error.message}`);
  }
}

module.exports = {
  getAvailableVersions,
  downloadServerJar
};